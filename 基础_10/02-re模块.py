# -*- coding: utf-8 -*-
# @Time    : 2020/11/24 20:51
# @Author  : sunzhen
# @File    : 02-re模块.py
# @Software: PyCharm
# 规律 re模块
# 正则表达式的定义

"""
\W	 匹配任何非单词字符 (等价于[^A-Za-z0-9_])

\w	匹配包括下划线的任何单词字符（等价于[A-Za-z0-9_]）	\w	\w	\w	\w
\B	匹配非单词边界，例如：'er\B' 能匹配 "verb" 中的'er'，但不能匹配"never" 中的'er'
\b  匹配一个单词边界，也就是指单词和空格间的位置，例如： 'er\b' 可以匹配"never" 中的 'er'，但不能匹配 "verb" 中的'er'
\t	匹配一个横向制表符（等价于 \x09和 \cI）
\v	匹配一个垂直制表符（等价于 \x0b和 \cK）
\n	匹配一个换行符（等价于 \x0a 和\cJ）
\f	匹配一个换页符（等价于\x0c 和\cL）
\r	匹配一个回车符（等价于 \x0d 和\cM）
\\	匹配转义字符本身"\"
\cx 匹配由 x 指明的控制字符，例如：\cM匹配一个Control-M 或回车符，x 的值必须为A-Z 或 a-z 之一，否则，将 c 视为一个原义的 'c' 字符
\xn  匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长，例如：'\x41' 匹配 "A"。'\x041' 则等价于'\x04' & "1"。正则表达式中可以使用 ASCII 编码
\num 匹配 num，其中 num是一个正整数。表示对所获取的匹配的引用

"""
import re

a = 'aAbc123_*()-='
b = re.findall('\w', a)  # 一个字符串从左到右全部找一边
W = re.findall('\W', a)  # 一个字符串从左到右全部找一边
print(W)
